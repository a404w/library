schema {
  query: Query
  mutation: Mutation
}

# -----------------------------
# QUERIES
# -----------------------------
type Query {
  # -- Bücher
  getBooks: [Book!]!
  getBookById(id: ID!): Book
  getBooksByGenreId(id: ID!): [Book!]!
  getBooksByAuthorId(id: ID!): [Book!]!

  # -- Benutzer
  getUsers: [User!]!
  getUserById(id: ID!): User
  getUserByName(name: String!): User

  # -- Ausleihen (Loans)
  getLoans: [Loan!]!
  getLoanById(id: ID!): Loan
  getLoansByUser(userId: ID!): [Loan!]!
  getLoansByBook(bookId: ID!): [Loan!]!

  # -- Autoren
  getAllAuthors: [Author!]!
  getAuthorById(id: ID!): Author
  getAuthorsByName(name: String!): [Author!]!

  # -- Genres
  getAllGenres: [Genre!]!
  getGenreById(id: ID!): Genre
  getGenresByName(name: String!): Genre

  # -- Reservationen
  getAllReservations: [Reservation!]!
  getReservationById(id: ID!): Reservation
  getReservationsByUser(userId: ID!): [Reservation!]!
  getReservationByBook(bookId: ID!): [Reservation!]!
}

# -----------------------------
# MUTATIONS
# -----------------------------
type Mutation {
  # -- Bücher
  addBook(book: BookInput!): Book
  updateBook(book: BookInput!): Boolean
  deleteBook(id: ID!): Boolean

  # -- Ausleihen
  addLoan(book: BookInput!, user: UserInput!): Loan
  deleteLoan(id: ID!): Boolean
  updateLoan(loan: LoanInput!): Boolean

  # -- Reservationen
  addReservation(book: BookInput!, user: UserInput!): Reservation
  deleteReservation(id: ID!): Boolean
  updateReservation(reservation: ReservationInput!): Boolean

  # -- User
  addUser(name: String!, email: String!): User
  updateUser(user: UserInput!): Boolean
  deleteUser(id: ID!): Boolean

  # -- Autoren
  addAuthor(name: String!): Author
  updateAuthor(author: AuthorInput!): Boolean
  deleteAuthor(id: ID!): Boolean

  # -- Genres
  addGenre(genrename: String!, beschreibung: String!): Genre
  updateGenre(genre: GenreInput!): Boolean
  deleteGenre(id: ID!): Boolean
}

# ----------------------------------------------------------------------------
# OUTPUT-Typen (werden von Queries/Mutations zurückgegeben)
# ----------------------------------------------------------------------------

type Book {
  id: ID!
  title: String!
  isbn: String!
  genres: [Genre!]!
  authors: [Author!]!
  isAvailable: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  borrowedBooks: [Book!]!
}

type Loan {
  id: ID!
  book: Book!
  user: User!
  from: String!
  to: String!
}

type Reservation {
  id: ID!
  user: User!
  book: Book!
  reservationDate: String!
}

type Author {
  id: ID!
  name: String!
  books: [Book!]!
}

type Genre {
  id: ID!
  genrename: String!
  beschreibung: String!
  books: [Book!]!
}

# ----------------------------------------------------------------------------
# INPUT-Typen (werden in Mutations als Argumente benutzt)
# ----------------------------------------------------------------------------

"""
BookInput wird in addBook(book: BookInput!) usw. verwendet.
So kann 'book' bei der Mutation kein 'type Book' mehr sein,
sondern korrekt ein Input-Objekt.
"""
input BookInput {
  id: ID
  title: String!
  isbn: String!
  isAvailable: Boolean!
  authors: [ID!] 
  genres: [ID!] 
}

input UserInput {
  id: ID
  name: String!
  email: String!
}

input LoanInput {
  id: ID
  from: String!
  to: String!
  book: BookInput!
  user: UserInput!
}

input ReservationInput {
  id: ID
  reservationDate: String!
  book: BookInput!
  user: UserInput!
}

input AuthorInput {
  id: ID
  name: String!
}

input GenreInput {
  id: ID
  genrename: String!
  beschreibung: String!
}
